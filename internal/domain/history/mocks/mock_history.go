// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hrvadl/book-service/internal/domain/history (interfaces: HistorySource)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_history.go -package=mocks . HistorySource
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	history "github.com/hrvadl/book-service/internal/domain/history"
	gomock "go.uber.org/mock/gomock"
)

// MockHistorySource is a mock of HistorySource interface.
type MockHistorySource struct {
	ctrl     *gomock.Controller
	recorder *MockHistorySourceMockRecorder
}

// MockHistorySourceMockRecorder is the mock recorder for MockHistorySource.
type MockHistorySourceMockRecorder struct {
	mock *MockHistorySource
}

// NewMockHistorySource creates a new mock instance.
func NewMockHistorySource(ctrl *gomock.Controller) *MockHistorySource {
	mock := &MockHistorySource{ctrl: ctrl}
	mock.recorder = &MockHistorySourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistorySource) EXPECT() *MockHistorySourceMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockHistorySource) GetByUserID(arg0 context.Context, arg1 int) ([]history.ReadingHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1)
	ret0, _ := ret[0].([]history.ReadingHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockHistorySourceMockRecorder) GetByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockHistorySource)(nil).GetByUserID), arg0, arg1)
}
