// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hrvadl/book-service/internal/domain/recommendation (interfaces: BookSource)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_books.go -package=mocks . BookSource
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	book "github.com/hrvadl/book-service/internal/domain/book"
	gomock "go.uber.org/mock/gomock"
)

// MockBookSource is a mock of BookSource interface.
type MockBookSource struct {
	ctrl     *gomock.Controller
	recorder *MockBookSourceMockRecorder
}

// MockBookSourceMockRecorder is the mock recorder for MockBookSource.
type MockBookSourceMockRecorder struct {
	mock *MockBookSource
}

// NewMockBookSource creates a new mock instance.
func NewMockBookSource(ctrl *gomock.Controller) *MockBookSource {
	mock := &MockBookSource{ctrl: ctrl}
	mock.recorder = &MockBookSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookSource) EXPECT() *MockBookSourceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockBookSource) GetAll(arg0 context.Context) ([]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBookSourceMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBookSource)(nil).GetAll), arg0)
}
