// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hrvadl/book-service/internal/domain/author (interfaces: AuthorSaver)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_saver.go -package=mocks . AuthorSaver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	author "github.com/hrvadl/book-service/internal/domain/author"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorSaver is a mock of AuthorSaver interface.
type MockAuthorSaver struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorSaverMockRecorder
}

// MockAuthorSaverMockRecorder is the mock recorder for MockAuthorSaver.
type MockAuthorSaverMockRecorder struct {
	mock *MockAuthorSaver
}

// NewMockAuthorSaver creates a new mock instance.
func NewMockAuthorSaver(ctrl *gomock.Controller) *MockAuthorSaver {
	mock := &MockAuthorSaver{ctrl: ctrl}
	mock.recorder = &MockAuthorSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorSaver) EXPECT() *MockAuthorSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockAuthorSaver) Save(arg0 context.Context, arg1 author.Author) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockAuthorSaverMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAuthorSaver)(nil).Save), arg0, arg1)
}
